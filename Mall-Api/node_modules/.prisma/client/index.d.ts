
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model ownerModel
 * 
 */
export type ownerModel = $Result.DefaultSelection<Prisma.$ownerModelPayload>
/**
 * Model storeModel
 * 
 */
export type storeModel = $Result.DefaultSelection<Prisma.$storeModelPayload>
/**
 * Model theAdminModel
 * 
 */
export type theAdminModel = $Result.DefaultSelection<Prisma.$theAdminModelPayload>
/**
 * Model theDispatchRiderModel
 * 
 */
export type theDispatchRiderModel = $Result.DefaultSelection<Prisma.$theDispatchRiderModelPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more OwnerModels
 * const ownerModels = await prisma.ownerModel.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more OwnerModels
   * const ownerModels = await prisma.ownerModel.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.ownerModel`: Exposes CRUD operations for the **ownerModel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OwnerModels
    * const ownerModels = await prisma.ownerModel.findMany()
    * ```
    */
  get ownerModel(): Prisma.ownerModelDelegate<ExtArgs>;

  /**
   * `prisma.storeModel`: Exposes CRUD operations for the **storeModel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StoreModels
    * const storeModels = await prisma.storeModel.findMany()
    * ```
    */
  get storeModel(): Prisma.storeModelDelegate<ExtArgs>;

  /**
   * `prisma.theAdminModel`: Exposes CRUD operations for the **theAdminModel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TheAdminModels
    * const theAdminModels = await prisma.theAdminModel.findMany()
    * ```
    */
  get theAdminModel(): Prisma.theAdminModelDelegate<ExtArgs>;

  /**
   * `prisma.theDispatchRiderModel`: Exposes CRUD operations for the **theDispatchRiderModel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TheDispatchRiderModels
    * const theDispatchRiderModels = await prisma.theDispatchRiderModel.findMany()
    * ```
    */
  get theDispatchRiderModel(): Prisma.theDispatchRiderModelDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.2.0
   * Query Engine version: 2804dc98259d2ea960602aca6b8e7fdc03c1758f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    ownerModel: 'ownerModel',
    storeModel: 'storeModel',
    theAdminModel: 'theAdminModel',
    theDispatchRiderModel: 'theDispatchRiderModel'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'ownerModel' | 'storeModel' | 'theAdminModel' | 'theDispatchRiderModel'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      ownerModel: {
        payload: Prisma.$ownerModelPayload<ExtArgs>
        fields: Prisma.ownerModelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ownerModelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ownerModelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ownerModelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ownerModelPayload>
          }
          findFirst: {
            args: Prisma.ownerModelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ownerModelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ownerModelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ownerModelPayload>
          }
          findMany: {
            args: Prisma.ownerModelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ownerModelPayload>[]
          }
          create: {
            args: Prisma.ownerModelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ownerModelPayload>
          }
          createMany: {
            args: Prisma.ownerModelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ownerModelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ownerModelPayload>
          }
          update: {
            args: Prisma.ownerModelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ownerModelPayload>
          }
          deleteMany: {
            args: Prisma.ownerModelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ownerModelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ownerModelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ownerModelPayload>
          }
          aggregate: {
            args: Prisma.OwnerModelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOwnerModel>
          }
          groupBy: {
            args: Prisma.ownerModelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OwnerModelGroupByOutputType>[]
          }
          count: {
            args: Prisma.ownerModelCountArgs<ExtArgs>,
            result: $Utils.Optional<OwnerModelCountAggregateOutputType> | number
          }
        }
      }
      storeModel: {
        payload: Prisma.$storeModelPayload<ExtArgs>
        fields: Prisma.storeModelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.storeModelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$storeModelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.storeModelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$storeModelPayload>
          }
          findFirst: {
            args: Prisma.storeModelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$storeModelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.storeModelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$storeModelPayload>
          }
          findMany: {
            args: Prisma.storeModelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$storeModelPayload>[]
          }
          create: {
            args: Prisma.storeModelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$storeModelPayload>
          }
          createMany: {
            args: Prisma.storeModelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.storeModelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$storeModelPayload>
          }
          update: {
            args: Prisma.storeModelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$storeModelPayload>
          }
          deleteMany: {
            args: Prisma.storeModelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.storeModelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.storeModelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$storeModelPayload>
          }
          aggregate: {
            args: Prisma.StoreModelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStoreModel>
          }
          groupBy: {
            args: Prisma.storeModelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StoreModelGroupByOutputType>[]
          }
          count: {
            args: Prisma.storeModelCountArgs<ExtArgs>,
            result: $Utils.Optional<StoreModelCountAggregateOutputType> | number
          }
        }
      }
      theAdminModel: {
        payload: Prisma.$theAdminModelPayload<ExtArgs>
        fields: Prisma.theAdminModelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.theAdminModelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$theAdminModelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.theAdminModelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$theAdminModelPayload>
          }
          findFirst: {
            args: Prisma.theAdminModelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$theAdminModelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.theAdminModelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$theAdminModelPayload>
          }
          findMany: {
            args: Prisma.theAdminModelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$theAdminModelPayload>[]
          }
          create: {
            args: Prisma.theAdminModelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$theAdminModelPayload>
          }
          createMany: {
            args: Prisma.theAdminModelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.theAdminModelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$theAdminModelPayload>
          }
          update: {
            args: Prisma.theAdminModelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$theAdminModelPayload>
          }
          deleteMany: {
            args: Prisma.theAdminModelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.theAdminModelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.theAdminModelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$theAdminModelPayload>
          }
          aggregate: {
            args: Prisma.TheAdminModelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTheAdminModel>
          }
          groupBy: {
            args: Prisma.theAdminModelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TheAdminModelGroupByOutputType>[]
          }
          count: {
            args: Prisma.theAdminModelCountArgs<ExtArgs>,
            result: $Utils.Optional<TheAdminModelCountAggregateOutputType> | number
          }
        }
      }
      theDispatchRiderModel: {
        payload: Prisma.$theDispatchRiderModelPayload<ExtArgs>
        fields: Prisma.theDispatchRiderModelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.theDispatchRiderModelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$theDispatchRiderModelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.theDispatchRiderModelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$theDispatchRiderModelPayload>
          }
          findFirst: {
            args: Prisma.theDispatchRiderModelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$theDispatchRiderModelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.theDispatchRiderModelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$theDispatchRiderModelPayload>
          }
          findMany: {
            args: Prisma.theDispatchRiderModelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$theDispatchRiderModelPayload>[]
          }
          create: {
            args: Prisma.theDispatchRiderModelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$theDispatchRiderModelPayload>
          }
          createMany: {
            args: Prisma.theDispatchRiderModelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.theDispatchRiderModelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$theDispatchRiderModelPayload>
          }
          update: {
            args: Prisma.theDispatchRiderModelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$theDispatchRiderModelPayload>
          }
          deleteMany: {
            args: Prisma.theDispatchRiderModelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.theDispatchRiderModelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.theDispatchRiderModelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$theDispatchRiderModelPayload>
          }
          aggregate: {
            args: Prisma.TheDispatchRiderModelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTheDispatchRiderModel>
          }
          groupBy: {
            args: Prisma.theDispatchRiderModelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TheDispatchRiderModelGroupByOutputType>[]
          }
          count: {
            args: Prisma.theDispatchRiderModelCountArgs<ExtArgs>,
            result: $Utils.Optional<TheDispatchRiderModelCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model ownerModel
   */

  export type AggregateOwnerModel = {
    _count: OwnerModelCountAggregateOutputType | null
    _min: OwnerModelMinAggregateOutputType | null
    _max: OwnerModelMaxAggregateOutputType | null
  }

  export type OwnerModelMinAggregateOutputType = {
    id: string | null
    owner: string | null
    email: string | null
    password: string | null
    token: string | null
    verified: boolean | null
    avatar: string | null
    avatarID: string | null
    role: string | null
    roleID: string | null
    createdAt: Date | null
  }

  export type OwnerModelMaxAggregateOutputType = {
    id: string | null
    owner: string | null
    email: string | null
    password: string | null
    token: string | null
    verified: boolean | null
    avatar: string | null
    avatarID: string | null
    role: string | null
    roleID: string | null
    createdAt: Date | null
  }

  export type OwnerModelCountAggregateOutputType = {
    id: number
    owner: number
    email: number
    password: number
    token: number
    verified: number
    avatar: number
    avatarID: number
    role: number
    roleID: number
    store: number
    createdAt: number
    _all: number
  }


  export type OwnerModelMinAggregateInputType = {
    id?: true
    owner?: true
    email?: true
    password?: true
    token?: true
    verified?: true
    avatar?: true
    avatarID?: true
    role?: true
    roleID?: true
    createdAt?: true
  }

  export type OwnerModelMaxAggregateInputType = {
    id?: true
    owner?: true
    email?: true
    password?: true
    token?: true
    verified?: true
    avatar?: true
    avatarID?: true
    role?: true
    roleID?: true
    createdAt?: true
  }

  export type OwnerModelCountAggregateInputType = {
    id?: true
    owner?: true
    email?: true
    password?: true
    token?: true
    verified?: true
    avatar?: true
    avatarID?: true
    role?: true
    roleID?: true
    store?: true
    createdAt?: true
    _all?: true
  }

  export type OwnerModelAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ownerModel to aggregate.
     */
    where?: ownerModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ownerModels to fetch.
     */
    orderBy?: ownerModelOrderByWithRelationInput | ownerModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ownerModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ownerModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ownerModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ownerModels
    **/
    _count?: true | OwnerModelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OwnerModelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OwnerModelMaxAggregateInputType
  }

  export type GetOwnerModelAggregateType<T extends OwnerModelAggregateArgs> = {
        [P in keyof T & keyof AggregateOwnerModel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOwnerModel[P]>
      : GetScalarType<T[P], AggregateOwnerModel[P]>
  }




  export type ownerModelGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ownerModelWhereInput
    orderBy?: ownerModelOrderByWithAggregationInput | ownerModelOrderByWithAggregationInput[]
    by: OwnerModelScalarFieldEnum[] | OwnerModelScalarFieldEnum
    having?: ownerModelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OwnerModelCountAggregateInputType | true
    _min?: OwnerModelMinAggregateInputType
    _max?: OwnerModelMaxAggregateInputType
  }

  export type OwnerModelGroupByOutputType = {
    id: string
    owner: string
    email: string
    password: string
    token: string | null
    verified: boolean
    avatar: string | null
    avatarID: string | null
    role: string | null
    roleID: string | null
    store: JsonValue
    createdAt: Date
    _count: OwnerModelCountAggregateOutputType | null
    _min: OwnerModelMinAggregateOutputType | null
    _max: OwnerModelMaxAggregateOutputType | null
  }

  type GetOwnerModelGroupByPayload<T extends ownerModelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OwnerModelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OwnerModelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OwnerModelGroupByOutputType[P]>
            : GetScalarType<T[P], OwnerModelGroupByOutputType[P]>
        }
      >
    >


  export type ownerModelSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    owner?: boolean
    email?: boolean
    password?: boolean
    token?: boolean
    verified?: boolean
    avatar?: boolean
    avatarID?: boolean
    role?: boolean
    roleID?: boolean
    store?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["ownerModel"]>

  export type ownerModelSelectScalar = {
    id?: boolean
    owner?: boolean
    email?: boolean
    password?: boolean
    token?: boolean
    verified?: boolean
    avatar?: boolean
    avatarID?: boolean
    role?: boolean
    roleID?: boolean
    store?: boolean
    createdAt?: boolean
  }


  export type $ownerModelPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "ownerModel"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: string
      owner: string
      email: string
      password: string
      token: string | null
      verified: boolean
      avatar: string | null
      avatarID: string | null
      role: string | null
      roleID: string | null
      store: Prisma.JsonValue
      createdAt: Date
    }, ExtArgs["result"]["ownerModel"]>
    composites: {}
  }


  type ownerModelGetPayload<S extends boolean | null | undefined | ownerModelDefaultArgs> = $Result.GetResult<Prisma.$ownerModelPayload, S>

  type ownerModelCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ownerModelFindManyArgs, 'select' | 'include'> & {
      select?: OwnerModelCountAggregateInputType | true
    }

  export interface ownerModelDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ownerModel'], meta: { name: 'ownerModel' } }
    /**
     * Find zero or one OwnerModel that matches the filter.
     * @param {ownerModelFindUniqueArgs} args - Arguments to find a OwnerModel
     * @example
     * // Get one OwnerModel
     * const ownerModel = await prisma.ownerModel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ownerModelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ownerModelFindUniqueArgs<ExtArgs>>
    ): Prisma__ownerModelClient<$Result.GetResult<Prisma.$ownerModelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one OwnerModel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ownerModelFindUniqueOrThrowArgs} args - Arguments to find a OwnerModel
     * @example
     * // Get one OwnerModel
     * const ownerModel = await prisma.ownerModel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ownerModelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ownerModelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ownerModelClient<$Result.GetResult<Prisma.$ownerModelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first OwnerModel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ownerModelFindFirstArgs} args - Arguments to find a OwnerModel
     * @example
     * // Get one OwnerModel
     * const ownerModel = await prisma.ownerModel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ownerModelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ownerModelFindFirstArgs<ExtArgs>>
    ): Prisma__ownerModelClient<$Result.GetResult<Prisma.$ownerModelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first OwnerModel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ownerModelFindFirstOrThrowArgs} args - Arguments to find a OwnerModel
     * @example
     * // Get one OwnerModel
     * const ownerModel = await prisma.ownerModel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ownerModelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ownerModelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ownerModelClient<$Result.GetResult<Prisma.$ownerModelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more OwnerModels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ownerModelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OwnerModels
     * const ownerModels = await prisma.ownerModel.findMany()
     * 
     * // Get first 10 OwnerModels
     * const ownerModels = await prisma.ownerModel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ownerModelWithIdOnly = await prisma.ownerModel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ownerModelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ownerModelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ownerModelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a OwnerModel.
     * @param {ownerModelCreateArgs} args - Arguments to create a OwnerModel.
     * @example
     * // Create one OwnerModel
     * const OwnerModel = await prisma.ownerModel.create({
     *   data: {
     *     // ... data to create a OwnerModel
     *   }
     * })
     * 
    **/
    create<T extends ownerModelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ownerModelCreateArgs<ExtArgs>>
    ): Prisma__ownerModelClient<$Result.GetResult<Prisma.$ownerModelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many OwnerModels.
     *     @param {ownerModelCreateManyArgs} args - Arguments to create many OwnerModels.
     *     @example
     *     // Create many OwnerModels
     *     const ownerModel = await prisma.ownerModel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ownerModelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ownerModelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OwnerModel.
     * @param {ownerModelDeleteArgs} args - Arguments to delete one OwnerModel.
     * @example
     * // Delete one OwnerModel
     * const OwnerModel = await prisma.ownerModel.delete({
     *   where: {
     *     // ... filter to delete one OwnerModel
     *   }
     * })
     * 
    **/
    delete<T extends ownerModelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ownerModelDeleteArgs<ExtArgs>>
    ): Prisma__ownerModelClient<$Result.GetResult<Prisma.$ownerModelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one OwnerModel.
     * @param {ownerModelUpdateArgs} args - Arguments to update one OwnerModel.
     * @example
     * // Update one OwnerModel
     * const ownerModel = await prisma.ownerModel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ownerModelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ownerModelUpdateArgs<ExtArgs>>
    ): Prisma__ownerModelClient<$Result.GetResult<Prisma.$ownerModelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more OwnerModels.
     * @param {ownerModelDeleteManyArgs} args - Arguments to filter OwnerModels to delete.
     * @example
     * // Delete a few OwnerModels
     * const { count } = await prisma.ownerModel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ownerModelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ownerModelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OwnerModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ownerModelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OwnerModels
     * const ownerModel = await prisma.ownerModel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ownerModelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ownerModelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OwnerModel.
     * @param {ownerModelUpsertArgs} args - Arguments to update or create a OwnerModel.
     * @example
     * // Update or create a OwnerModel
     * const ownerModel = await prisma.ownerModel.upsert({
     *   create: {
     *     // ... data to create a OwnerModel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OwnerModel we want to update
     *   }
     * })
    **/
    upsert<T extends ownerModelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ownerModelUpsertArgs<ExtArgs>>
    ): Prisma__ownerModelClient<$Result.GetResult<Prisma.$ownerModelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of OwnerModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ownerModelCountArgs} args - Arguments to filter OwnerModels to count.
     * @example
     * // Count the number of OwnerModels
     * const count = await prisma.ownerModel.count({
     *   where: {
     *     // ... the filter for the OwnerModels we want to count
     *   }
     * })
    **/
    count<T extends ownerModelCountArgs>(
      args?: Subset<T, ownerModelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OwnerModelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OwnerModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OwnerModelAggregateArgs>(args: Subset<T, OwnerModelAggregateArgs>): Prisma.PrismaPromise<GetOwnerModelAggregateType<T>>

    /**
     * Group by OwnerModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ownerModelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ownerModelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ownerModelGroupByArgs['orderBy'] }
        : { orderBy?: ownerModelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ownerModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOwnerModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ownerModel model
   */
  readonly fields: ownerModelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ownerModel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ownerModelClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ownerModel model
   */ 
  interface ownerModelFieldRefs {
    readonly id: FieldRef<"ownerModel", 'String'>
    readonly owner: FieldRef<"ownerModel", 'String'>
    readonly email: FieldRef<"ownerModel", 'String'>
    readonly password: FieldRef<"ownerModel", 'String'>
    readonly token: FieldRef<"ownerModel", 'String'>
    readonly verified: FieldRef<"ownerModel", 'Boolean'>
    readonly avatar: FieldRef<"ownerModel", 'String'>
    readonly avatarID: FieldRef<"ownerModel", 'String'>
    readonly role: FieldRef<"ownerModel", 'String'>
    readonly roleID: FieldRef<"ownerModel", 'String'>
    readonly store: FieldRef<"ownerModel", 'Json'>
    readonly createdAt: FieldRef<"ownerModel", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * ownerModel findUnique
   */
  export type ownerModelFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ownerModel
     */
    select?: ownerModelSelect<ExtArgs> | null
    /**
     * Filter, which ownerModel to fetch.
     */
    where: ownerModelWhereUniqueInput
  }


  /**
   * ownerModel findUniqueOrThrow
   */
  export type ownerModelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ownerModel
     */
    select?: ownerModelSelect<ExtArgs> | null
    /**
     * Filter, which ownerModel to fetch.
     */
    where: ownerModelWhereUniqueInput
  }


  /**
   * ownerModel findFirst
   */
  export type ownerModelFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ownerModel
     */
    select?: ownerModelSelect<ExtArgs> | null
    /**
     * Filter, which ownerModel to fetch.
     */
    where?: ownerModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ownerModels to fetch.
     */
    orderBy?: ownerModelOrderByWithRelationInput | ownerModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ownerModels.
     */
    cursor?: ownerModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ownerModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ownerModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ownerModels.
     */
    distinct?: OwnerModelScalarFieldEnum | OwnerModelScalarFieldEnum[]
  }


  /**
   * ownerModel findFirstOrThrow
   */
  export type ownerModelFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ownerModel
     */
    select?: ownerModelSelect<ExtArgs> | null
    /**
     * Filter, which ownerModel to fetch.
     */
    where?: ownerModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ownerModels to fetch.
     */
    orderBy?: ownerModelOrderByWithRelationInput | ownerModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ownerModels.
     */
    cursor?: ownerModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ownerModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ownerModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ownerModels.
     */
    distinct?: OwnerModelScalarFieldEnum | OwnerModelScalarFieldEnum[]
  }


  /**
   * ownerModel findMany
   */
  export type ownerModelFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ownerModel
     */
    select?: ownerModelSelect<ExtArgs> | null
    /**
     * Filter, which ownerModels to fetch.
     */
    where?: ownerModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ownerModels to fetch.
     */
    orderBy?: ownerModelOrderByWithRelationInput | ownerModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ownerModels.
     */
    cursor?: ownerModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ownerModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ownerModels.
     */
    skip?: number
    distinct?: OwnerModelScalarFieldEnum | OwnerModelScalarFieldEnum[]
  }


  /**
   * ownerModel create
   */
  export type ownerModelCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ownerModel
     */
    select?: ownerModelSelect<ExtArgs> | null
    /**
     * The data needed to create a ownerModel.
     */
    data: XOR<ownerModelCreateInput, ownerModelUncheckedCreateInput>
  }


  /**
   * ownerModel createMany
   */
  export type ownerModelCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ownerModels.
     */
    data: ownerModelCreateManyInput | ownerModelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ownerModel update
   */
  export type ownerModelUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ownerModel
     */
    select?: ownerModelSelect<ExtArgs> | null
    /**
     * The data needed to update a ownerModel.
     */
    data: XOR<ownerModelUpdateInput, ownerModelUncheckedUpdateInput>
    /**
     * Choose, which ownerModel to update.
     */
    where: ownerModelWhereUniqueInput
  }


  /**
   * ownerModel updateMany
   */
  export type ownerModelUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ownerModels.
     */
    data: XOR<ownerModelUpdateManyMutationInput, ownerModelUncheckedUpdateManyInput>
    /**
     * Filter which ownerModels to update
     */
    where?: ownerModelWhereInput
  }


  /**
   * ownerModel upsert
   */
  export type ownerModelUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ownerModel
     */
    select?: ownerModelSelect<ExtArgs> | null
    /**
     * The filter to search for the ownerModel to update in case it exists.
     */
    where: ownerModelWhereUniqueInput
    /**
     * In case the ownerModel found by the `where` argument doesn't exist, create a new ownerModel with this data.
     */
    create: XOR<ownerModelCreateInput, ownerModelUncheckedCreateInput>
    /**
     * In case the ownerModel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ownerModelUpdateInput, ownerModelUncheckedUpdateInput>
  }


  /**
   * ownerModel delete
   */
  export type ownerModelDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ownerModel
     */
    select?: ownerModelSelect<ExtArgs> | null
    /**
     * Filter which ownerModel to delete.
     */
    where: ownerModelWhereUniqueInput
  }


  /**
   * ownerModel deleteMany
   */
  export type ownerModelDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ownerModels to delete
     */
    where?: ownerModelWhereInput
  }


  /**
   * ownerModel without action
   */
  export type ownerModelDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ownerModel
     */
    select?: ownerModelSelect<ExtArgs> | null
  }



  /**
   * Model storeModel
   */

  export type AggregateStoreModel = {
    _count: StoreModelCountAggregateOutputType | null
    _avg: StoreModelAvgAggregateOutputType | null
    _sum: StoreModelSumAggregateOutputType | null
    _min: StoreModelMinAggregateOutputType | null
    _max: StoreModelMaxAggregateOutputType | null
  }

  export type StoreModelAvgAggregateOutputType = {
    cost: number | null
  }

  export type StoreModelSumAggregateOutputType = {
    cost: number | null
  }

  export type StoreModelMinAggregateOutputType = {
    id: string | null
    title: string | null
    cost: number | null
    description: string | null
    category: string | null
    color: string | null
    image: string | null
    imageID: string | null
    ownerID: string | null
    rating: string | null
    createdAt: Date | null
  }

  export type StoreModelMaxAggregateOutputType = {
    id: string | null
    title: string | null
    cost: number | null
    description: string | null
    category: string | null
    color: string | null
    image: string | null
    imageID: string | null
    ownerID: string | null
    rating: string | null
    createdAt: Date | null
  }

  export type StoreModelCountAggregateOutputType = {
    id: number
    title: number
    cost: number
    description: number
    category: number
    color: number
    image: number
    imageID: number
    ownerID: number
    rating: number
    createdAt: number
    _all: number
  }


  export type StoreModelAvgAggregateInputType = {
    cost?: true
  }

  export type StoreModelSumAggregateInputType = {
    cost?: true
  }

  export type StoreModelMinAggregateInputType = {
    id?: true
    title?: true
    cost?: true
    description?: true
    category?: true
    color?: true
    image?: true
    imageID?: true
    ownerID?: true
    rating?: true
    createdAt?: true
  }

  export type StoreModelMaxAggregateInputType = {
    id?: true
    title?: true
    cost?: true
    description?: true
    category?: true
    color?: true
    image?: true
    imageID?: true
    ownerID?: true
    rating?: true
    createdAt?: true
  }

  export type StoreModelCountAggregateInputType = {
    id?: true
    title?: true
    cost?: true
    description?: true
    category?: true
    color?: true
    image?: true
    imageID?: true
    ownerID?: true
    rating?: true
    createdAt?: true
    _all?: true
  }

  export type StoreModelAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which storeModel to aggregate.
     */
    where?: storeModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of storeModels to fetch.
     */
    orderBy?: storeModelOrderByWithRelationInput | storeModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: storeModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` storeModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` storeModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned storeModels
    **/
    _count?: true | StoreModelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StoreModelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StoreModelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoreModelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoreModelMaxAggregateInputType
  }

  export type GetStoreModelAggregateType<T extends StoreModelAggregateArgs> = {
        [P in keyof T & keyof AggregateStoreModel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStoreModel[P]>
      : GetScalarType<T[P], AggregateStoreModel[P]>
  }




  export type storeModelGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: storeModelWhereInput
    orderBy?: storeModelOrderByWithAggregationInput | storeModelOrderByWithAggregationInput[]
    by: StoreModelScalarFieldEnum[] | StoreModelScalarFieldEnum
    having?: storeModelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoreModelCountAggregateInputType | true
    _avg?: StoreModelAvgAggregateInputType
    _sum?: StoreModelSumAggregateInputType
    _min?: StoreModelMinAggregateInputType
    _max?: StoreModelMaxAggregateInputType
  }

  export type StoreModelGroupByOutputType = {
    id: string
    title: string | null
    cost: number
    description: string | null
    category: string
    color: string
    image: string | null
    imageID: string | null
    ownerID: string
    rating: string | null
    createdAt: Date
    _count: StoreModelCountAggregateOutputType | null
    _avg: StoreModelAvgAggregateOutputType | null
    _sum: StoreModelSumAggregateOutputType | null
    _min: StoreModelMinAggregateOutputType | null
    _max: StoreModelMaxAggregateOutputType | null
  }

  type GetStoreModelGroupByPayload<T extends storeModelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StoreModelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoreModelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoreModelGroupByOutputType[P]>
            : GetScalarType<T[P], StoreModelGroupByOutputType[P]>
        }
      >
    >


  export type storeModelSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    cost?: boolean
    description?: boolean
    category?: boolean
    color?: boolean
    image?: boolean
    imageID?: boolean
    ownerID?: boolean
    rating?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["storeModel"]>

  export type storeModelSelectScalar = {
    id?: boolean
    title?: boolean
    cost?: boolean
    description?: boolean
    category?: boolean
    color?: boolean
    image?: boolean
    imageID?: boolean
    ownerID?: boolean
    rating?: boolean
    createdAt?: boolean
  }


  export type $storeModelPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "storeModel"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: string
      title: string | null
      cost: number
      description: string | null
      category: string
      color: string
      image: string | null
      imageID: string | null
      ownerID: string
      rating: string | null
      createdAt: Date
    }, ExtArgs["result"]["storeModel"]>
    composites: {}
  }


  type storeModelGetPayload<S extends boolean | null | undefined | storeModelDefaultArgs> = $Result.GetResult<Prisma.$storeModelPayload, S>

  type storeModelCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<storeModelFindManyArgs, 'select' | 'include'> & {
      select?: StoreModelCountAggregateInputType | true
    }

  export interface storeModelDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['storeModel'], meta: { name: 'storeModel' } }
    /**
     * Find zero or one StoreModel that matches the filter.
     * @param {storeModelFindUniqueArgs} args - Arguments to find a StoreModel
     * @example
     * // Get one StoreModel
     * const storeModel = await prisma.storeModel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends storeModelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, storeModelFindUniqueArgs<ExtArgs>>
    ): Prisma__storeModelClient<$Result.GetResult<Prisma.$storeModelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one StoreModel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {storeModelFindUniqueOrThrowArgs} args - Arguments to find a StoreModel
     * @example
     * // Get one StoreModel
     * const storeModel = await prisma.storeModel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends storeModelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, storeModelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__storeModelClient<$Result.GetResult<Prisma.$storeModelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first StoreModel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storeModelFindFirstArgs} args - Arguments to find a StoreModel
     * @example
     * // Get one StoreModel
     * const storeModel = await prisma.storeModel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends storeModelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, storeModelFindFirstArgs<ExtArgs>>
    ): Prisma__storeModelClient<$Result.GetResult<Prisma.$storeModelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first StoreModel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storeModelFindFirstOrThrowArgs} args - Arguments to find a StoreModel
     * @example
     * // Get one StoreModel
     * const storeModel = await prisma.storeModel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends storeModelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, storeModelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__storeModelClient<$Result.GetResult<Prisma.$storeModelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more StoreModels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storeModelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StoreModels
     * const storeModels = await prisma.storeModel.findMany()
     * 
     * // Get first 10 StoreModels
     * const storeModels = await prisma.storeModel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storeModelWithIdOnly = await prisma.storeModel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends storeModelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, storeModelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$storeModelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a StoreModel.
     * @param {storeModelCreateArgs} args - Arguments to create a StoreModel.
     * @example
     * // Create one StoreModel
     * const StoreModel = await prisma.storeModel.create({
     *   data: {
     *     // ... data to create a StoreModel
     *   }
     * })
     * 
    **/
    create<T extends storeModelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, storeModelCreateArgs<ExtArgs>>
    ): Prisma__storeModelClient<$Result.GetResult<Prisma.$storeModelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many StoreModels.
     *     @param {storeModelCreateManyArgs} args - Arguments to create many StoreModels.
     *     @example
     *     // Create many StoreModels
     *     const storeModel = await prisma.storeModel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends storeModelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, storeModelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StoreModel.
     * @param {storeModelDeleteArgs} args - Arguments to delete one StoreModel.
     * @example
     * // Delete one StoreModel
     * const StoreModel = await prisma.storeModel.delete({
     *   where: {
     *     // ... filter to delete one StoreModel
     *   }
     * })
     * 
    **/
    delete<T extends storeModelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, storeModelDeleteArgs<ExtArgs>>
    ): Prisma__storeModelClient<$Result.GetResult<Prisma.$storeModelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one StoreModel.
     * @param {storeModelUpdateArgs} args - Arguments to update one StoreModel.
     * @example
     * // Update one StoreModel
     * const storeModel = await prisma.storeModel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends storeModelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, storeModelUpdateArgs<ExtArgs>>
    ): Prisma__storeModelClient<$Result.GetResult<Prisma.$storeModelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more StoreModels.
     * @param {storeModelDeleteManyArgs} args - Arguments to filter StoreModels to delete.
     * @example
     * // Delete a few StoreModels
     * const { count } = await prisma.storeModel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends storeModelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, storeModelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StoreModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storeModelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StoreModels
     * const storeModel = await prisma.storeModel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends storeModelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, storeModelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StoreModel.
     * @param {storeModelUpsertArgs} args - Arguments to update or create a StoreModel.
     * @example
     * // Update or create a StoreModel
     * const storeModel = await prisma.storeModel.upsert({
     *   create: {
     *     // ... data to create a StoreModel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StoreModel we want to update
     *   }
     * })
    **/
    upsert<T extends storeModelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, storeModelUpsertArgs<ExtArgs>>
    ): Prisma__storeModelClient<$Result.GetResult<Prisma.$storeModelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of StoreModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storeModelCountArgs} args - Arguments to filter StoreModels to count.
     * @example
     * // Count the number of StoreModels
     * const count = await prisma.storeModel.count({
     *   where: {
     *     // ... the filter for the StoreModels we want to count
     *   }
     * })
    **/
    count<T extends storeModelCountArgs>(
      args?: Subset<T, storeModelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoreModelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StoreModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoreModelAggregateArgs>(args: Subset<T, StoreModelAggregateArgs>): Prisma.PrismaPromise<GetStoreModelAggregateType<T>>

    /**
     * Group by StoreModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storeModelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends storeModelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: storeModelGroupByArgs['orderBy'] }
        : { orderBy?: storeModelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, storeModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoreModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the storeModel model
   */
  readonly fields: storeModelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for storeModel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__storeModelClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the storeModel model
   */ 
  interface storeModelFieldRefs {
    readonly id: FieldRef<"storeModel", 'String'>
    readonly title: FieldRef<"storeModel", 'String'>
    readonly cost: FieldRef<"storeModel", 'Int'>
    readonly description: FieldRef<"storeModel", 'String'>
    readonly category: FieldRef<"storeModel", 'String'>
    readonly color: FieldRef<"storeModel", 'String'>
    readonly image: FieldRef<"storeModel", 'String'>
    readonly imageID: FieldRef<"storeModel", 'String'>
    readonly ownerID: FieldRef<"storeModel", 'String'>
    readonly rating: FieldRef<"storeModel", 'String'>
    readonly createdAt: FieldRef<"storeModel", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * storeModel findUnique
   */
  export type storeModelFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the storeModel
     */
    select?: storeModelSelect<ExtArgs> | null
    /**
     * Filter, which storeModel to fetch.
     */
    where: storeModelWhereUniqueInput
  }


  /**
   * storeModel findUniqueOrThrow
   */
  export type storeModelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the storeModel
     */
    select?: storeModelSelect<ExtArgs> | null
    /**
     * Filter, which storeModel to fetch.
     */
    where: storeModelWhereUniqueInput
  }


  /**
   * storeModel findFirst
   */
  export type storeModelFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the storeModel
     */
    select?: storeModelSelect<ExtArgs> | null
    /**
     * Filter, which storeModel to fetch.
     */
    where?: storeModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of storeModels to fetch.
     */
    orderBy?: storeModelOrderByWithRelationInput | storeModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for storeModels.
     */
    cursor?: storeModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` storeModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` storeModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of storeModels.
     */
    distinct?: StoreModelScalarFieldEnum | StoreModelScalarFieldEnum[]
  }


  /**
   * storeModel findFirstOrThrow
   */
  export type storeModelFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the storeModel
     */
    select?: storeModelSelect<ExtArgs> | null
    /**
     * Filter, which storeModel to fetch.
     */
    where?: storeModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of storeModels to fetch.
     */
    orderBy?: storeModelOrderByWithRelationInput | storeModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for storeModels.
     */
    cursor?: storeModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` storeModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` storeModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of storeModels.
     */
    distinct?: StoreModelScalarFieldEnum | StoreModelScalarFieldEnum[]
  }


  /**
   * storeModel findMany
   */
  export type storeModelFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the storeModel
     */
    select?: storeModelSelect<ExtArgs> | null
    /**
     * Filter, which storeModels to fetch.
     */
    where?: storeModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of storeModels to fetch.
     */
    orderBy?: storeModelOrderByWithRelationInput | storeModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing storeModels.
     */
    cursor?: storeModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` storeModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` storeModels.
     */
    skip?: number
    distinct?: StoreModelScalarFieldEnum | StoreModelScalarFieldEnum[]
  }


  /**
   * storeModel create
   */
  export type storeModelCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the storeModel
     */
    select?: storeModelSelect<ExtArgs> | null
    /**
     * The data needed to create a storeModel.
     */
    data: XOR<storeModelCreateInput, storeModelUncheckedCreateInput>
  }


  /**
   * storeModel createMany
   */
  export type storeModelCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many storeModels.
     */
    data: storeModelCreateManyInput | storeModelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * storeModel update
   */
  export type storeModelUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the storeModel
     */
    select?: storeModelSelect<ExtArgs> | null
    /**
     * The data needed to update a storeModel.
     */
    data: XOR<storeModelUpdateInput, storeModelUncheckedUpdateInput>
    /**
     * Choose, which storeModel to update.
     */
    where: storeModelWhereUniqueInput
  }


  /**
   * storeModel updateMany
   */
  export type storeModelUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update storeModels.
     */
    data: XOR<storeModelUpdateManyMutationInput, storeModelUncheckedUpdateManyInput>
    /**
     * Filter which storeModels to update
     */
    where?: storeModelWhereInput
  }


  /**
   * storeModel upsert
   */
  export type storeModelUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the storeModel
     */
    select?: storeModelSelect<ExtArgs> | null
    /**
     * The filter to search for the storeModel to update in case it exists.
     */
    where: storeModelWhereUniqueInput
    /**
     * In case the storeModel found by the `where` argument doesn't exist, create a new storeModel with this data.
     */
    create: XOR<storeModelCreateInput, storeModelUncheckedCreateInput>
    /**
     * In case the storeModel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<storeModelUpdateInput, storeModelUncheckedUpdateInput>
  }


  /**
   * storeModel delete
   */
  export type storeModelDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the storeModel
     */
    select?: storeModelSelect<ExtArgs> | null
    /**
     * Filter which storeModel to delete.
     */
    where: storeModelWhereUniqueInput
  }


  /**
   * storeModel deleteMany
   */
  export type storeModelDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which storeModels to delete
     */
    where?: storeModelWhereInput
  }


  /**
   * storeModel without action
   */
  export type storeModelDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the storeModel
     */
    select?: storeModelSelect<ExtArgs> | null
  }



  /**
   * Model theAdminModel
   */

  export type AggregateTheAdminModel = {
    _count: TheAdminModelCountAggregateOutputType | null
    _min: TheAdminModelMinAggregateOutputType | null
    _max: TheAdminModelMaxAggregateOutputType | null
  }

  export type TheAdminModelMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    token: string | null
    verified: boolean | null
    secretKey: string | null
    role: string | null
    roleID: string | null
    createdAt: Date | null
  }

  export type TheAdminModelMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    token: string | null
    verified: boolean | null
    secretKey: string | null
    role: string | null
    roleID: string | null
    createdAt: Date | null
  }

  export type TheAdminModelCountAggregateOutputType = {
    id: number
    email: number
    password: number
    token: number
    verified: number
    secretKey: number
    role: number
    roleID: number
    createdAt: number
    _all: number
  }


  export type TheAdminModelMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    token?: true
    verified?: true
    secretKey?: true
    role?: true
    roleID?: true
    createdAt?: true
  }

  export type TheAdminModelMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    token?: true
    verified?: true
    secretKey?: true
    role?: true
    roleID?: true
    createdAt?: true
  }

  export type TheAdminModelCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    token?: true
    verified?: true
    secretKey?: true
    role?: true
    roleID?: true
    createdAt?: true
    _all?: true
  }

  export type TheAdminModelAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which theAdminModel to aggregate.
     */
    where?: theAdminModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of theAdminModels to fetch.
     */
    orderBy?: theAdminModelOrderByWithRelationInput | theAdminModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: theAdminModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` theAdminModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` theAdminModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned theAdminModels
    **/
    _count?: true | TheAdminModelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TheAdminModelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TheAdminModelMaxAggregateInputType
  }

  export type GetTheAdminModelAggregateType<T extends TheAdminModelAggregateArgs> = {
        [P in keyof T & keyof AggregateTheAdminModel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTheAdminModel[P]>
      : GetScalarType<T[P], AggregateTheAdminModel[P]>
  }




  export type theAdminModelGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: theAdminModelWhereInput
    orderBy?: theAdminModelOrderByWithAggregationInput | theAdminModelOrderByWithAggregationInput[]
    by: TheAdminModelScalarFieldEnum[] | TheAdminModelScalarFieldEnum
    having?: theAdminModelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TheAdminModelCountAggregateInputType | true
    _min?: TheAdminModelMinAggregateInputType
    _max?: TheAdminModelMaxAggregateInputType
  }

  export type TheAdminModelGroupByOutputType = {
    id: string
    email: string
    password: string
    token: string
    verified: boolean
    secretKey: string
    role: string | null
    roleID: string | null
    createdAt: Date
    _count: TheAdminModelCountAggregateOutputType | null
    _min: TheAdminModelMinAggregateOutputType | null
    _max: TheAdminModelMaxAggregateOutputType | null
  }

  type GetTheAdminModelGroupByPayload<T extends theAdminModelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TheAdminModelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TheAdminModelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TheAdminModelGroupByOutputType[P]>
            : GetScalarType<T[P], TheAdminModelGroupByOutputType[P]>
        }
      >
    >


  export type theAdminModelSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    token?: boolean
    verified?: boolean
    secretKey?: boolean
    role?: boolean
    roleID?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["theAdminModel"]>

  export type theAdminModelSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    token?: boolean
    verified?: boolean
    secretKey?: boolean
    role?: boolean
    roleID?: boolean
    createdAt?: boolean
  }


  export type $theAdminModelPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "theAdminModel"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: string
      email: string
      password: string
      token: string
      verified: boolean
      secretKey: string
      role: string | null
      roleID: string | null
      createdAt: Date
    }, ExtArgs["result"]["theAdminModel"]>
    composites: {}
  }


  type theAdminModelGetPayload<S extends boolean | null | undefined | theAdminModelDefaultArgs> = $Result.GetResult<Prisma.$theAdminModelPayload, S>

  type theAdminModelCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<theAdminModelFindManyArgs, 'select' | 'include'> & {
      select?: TheAdminModelCountAggregateInputType | true
    }

  export interface theAdminModelDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['theAdminModel'], meta: { name: 'theAdminModel' } }
    /**
     * Find zero or one TheAdminModel that matches the filter.
     * @param {theAdminModelFindUniqueArgs} args - Arguments to find a TheAdminModel
     * @example
     * // Get one TheAdminModel
     * const theAdminModel = await prisma.theAdminModel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends theAdminModelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, theAdminModelFindUniqueArgs<ExtArgs>>
    ): Prisma__theAdminModelClient<$Result.GetResult<Prisma.$theAdminModelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TheAdminModel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {theAdminModelFindUniqueOrThrowArgs} args - Arguments to find a TheAdminModel
     * @example
     * // Get one TheAdminModel
     * const theAdminModel = await prisma.theAdminModel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends theAdminModelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, theAdminModelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__theAdminModelClient<$Result.GetResult<Prisma.$theAdminModelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TheAdminModel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {theAdminModelFindFirstArgs} args - Arguments to find a TheAdminModel
     * @example
     * // Get one TheAdminModel
     * const theAdminModel = await prisma.theAdminModel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends theAdminModelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, theAdminModelFindFirstArgs<ExtArgs>>
    ): Prisma__theAdminModelClient<$Result.GetResult<Prisma.$theAdminModelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TheAdminModel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {theAdminModelFindFirstOrThrowArgs} args - Arguments to find a TheAdminModel
     * @example
     * // Get one TheAdminModel
     * const theAdminModel = await prisma.theAdminModel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends theAdminModelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, theAdminModelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__theAdminModelClient<$Result.GetResult<Prisma.$theAdminModelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TheAdminModels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {theAdminModelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TheAdminModels
     * const theAdminModels = await prisma.theAdminModel.findMany()
     * 
     * // Get first 10 TheAdminModels
     * const theAdminModels = await prisma.theAdminModel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const theAdminModelWithIdOnly = await prisma.theAdminModel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends theAdminModelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, theAdminModelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$theAdminModelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TheAdminModel.
     * @param {theAdminModelCreateArgs} args - Arguments to create a TheAdminModel.
     * @example
     * // Create one TheAdminModel
     * const TheAdminModel = await prisma.theAdminModel.create({
     *   data: {
     *     // ... data to create a TheAdminModel
     *   }
     * })
     * 
    **/
    create<T extends theAdminModelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, theAdminModelCreateArgs<ExtArgs>>
    ): Prisma__theAdminModelClient<$Result.GetResult<Prisma.$theAdminModelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many TheAdminModels.
     *     @param {theAdminModelCreateManyArgs} args - Arguments to create many TheAdminModels.
     *     @example
     *     // Create many TheAdminModels
     *     const theAdminModel = await prisma.theAdminModel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends theAdminModelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, theAdminModelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TheAdminModel.
     * @param {theAdminModelDeleteArgs} args - Arguments to delete one TheAdminModel.
     * @example
     * // Delete one TheAdminModel
     * const TheAdminModel = await prisma.theAdminModel.delete({
     *   where: {
     *     // ... filter to delete one TheAdminModel
     *   }
     * })
     * 
    **/
    delete<T extends theAdminModelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, theAdminModelDeleteArgs<ExtArgs>>
    ): Prisma__theAdminModelClient<$Result.GetResult<Prisma.$theAdminModelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TheAdminModel.
     * @param {theAdminModelUpdateArgs} args - Arguments to update one TheAdminModel.
     * @example
     * // Update one TheAdminModel
     * const theAdminModel = await prisma.theAdminModel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends theAdminModelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, theAdminModelUpdateArgs<ExtArgs>>
    ): Prisma__theAdminModelClient<$Result.GetResult<Prisma.$theAdminModelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TheAdminModels.
     * @param {theAdminModelDeleteManyArgs} args - Arguments to filter TheAdminModels to delete.
     * @example
     * // Delete a few TheAdminModels
     * const { count } = await prisma.theAdminModel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends theAdminModelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, theAdminModelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TheAdminModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {theAdminModelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TheAdminModels
     * const theAdminModel = await prisma.theAdminModel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends theAdminModelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, theAdminModelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TheAdminModel.
     * @param {theAdminModelUpsertArgs} args - Arguments to update or create a TheAdminModel.
     * @example
     * // Update or create a TheAdminModel
     * const theAdminModel = await prisma.theAdminModel.upsert({
     *   create: {
     *     // ... data to create a TheAdminModel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TheAdminModel we want to update
     *   }
     * })
    **/
    upsert<T extends theAdminModelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, theAdminModelUpsertArgs<ExtArgs>>
    ): Prisma__theAdminModelClient<$Result.GetResult<Prisma.$theAdminModelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of TheAdminModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {theAdminModelCountArgs} args - Arguments to filter TheAdminModels to count.
     * @example
     * // Count the number of TheAdminModels
     * const count = await prisma.theAdminModel.count({
     *   where: {
     *     // ... the filter for the TheAdminModels we want to count
     *   }
     * })
    **/
    count<T extends theAdminModelCountArgs>(
      args?: Subset<T, theAdminModelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TheAdminModelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TheAdminModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheAdminModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TheAdminModelAggregateArgs>(args: Subset<T, TheAdminModelAggregateArgs>): Prisma.PrismaPromise<GetTheAdminModelAggregateType<T>>

    /**
     * Group by TheAdminModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {theAdminModelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends theAdminModelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: theAdminModelGroupByArgs['orderBy'] }
        : { orderBy?: theAdminModelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, theAdminModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTheAdminModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the theAdminModel model
   */
  readonly fields: theAdminModelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for theAdminModel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__theAdminModelClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the theAdminModel model
   */ 
  interface theAdminModelFieldRefs {
    readonly id: FieldRef<"theAdminModel", 'String'>
    readonly email: FieldRef<"theAdminModel", 'String'>
    readonly password: FieldRef<"theAdminModel", 'String'>
    readonly token: FieldRef<"theAdminModel", 'String'>
    readonly verified: FieldRef<"theAdminModel", 'Boolean'>
    readonly secretKey: FieldRef<"theAdminModel", 'String'>
    readonly role: FieldRef<"theAdminModel", 'String'>
    readonly roleID: FieldRef<"theAdminModel", 'String'>
    readonly createdAt: FieldRef<"theAdminModel", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * theAdminModel findUnique
   */
  export type theAdminModelFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the theAdminModel
     */
    select?: theAdminModelSelect<ExtArgs> | null
    /**
     * Filter, which theAdminModel to fetch.
     */
    where: theAdminModelWhereUniqueInput
  }


  /**
   * theAdminModel findUniqueOrThrow
   */
  export type theAdminModelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the theAdminModel
     */
    select?: theAdminModelSelect<ExtArgs> | null
    /**
     * Filter, which theAdminModel to fetch.
     */
    where: theAdminModelWhereUniqueInput
  }


  /**
   * theAdminModel findFirst
   */
  export type theAdminModelFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the theAdminModel
     */
    select?: theAdminModelSelect<ExtArgs> | null
    /**
     * Filter, which theAdminModel to fetch.
     */
    where?: theAdminModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of theAdminModels to fetch.
     */
    orderBy?: theAdminModelOrderByWithRelationInput | theAdminModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for theAdminModels.
     */
    cursor?: theAdminModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` theAdminModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` theAdminModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of theAdminModels.
     */
    distinct?: TheAdminModelScalarFieldEnum | TheAdminModelScalarFieldEnum[]
  }


  /**
   * theAdminModel findFirstOrThrow
   */
  export type theAdminModelFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the theAdminModel
     */
    select?: theAdminModelSelect<ExtArgs> | null
    /**
     * Filter, which theAdminModel to fetch.
     */
    where?: theAdminModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of theAdminModels to fetch.
     */
    orderBy?: theAdminModelOrderByWithRelationInput | theAdminModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for theAdminModels.
     */
    cursor?: theAdminModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` theAdminModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` theAdminModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of theAdminModels.
     */
    distinct?: TheAdminModelScalarFieldEnum | TheAdminModelScalarFieldEnum[]
  }


  /**
   * theAdminModel findMany
   */
  export type theAdminModelFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the theAdminModel
     */
    select?: theAdminModelSelect<ExtArgs> | null
    /**
     * Filter, which theAdminModels to fetch.
     */
    where?: theAdminModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of theAdminModels to fetch.
     */
    orderBy?: theAdminModelOrderByWithRelationInput | theAdminModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing theAdminModels.
     */
    cursor?: theAdminModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` theAdminModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` theAdminModels.
     */
    skip?: number
    distinct?: TheAdminModelScalarFieldEnum | TheAdminModelScalarFieldEnum[]
  }


  /**
   * theAdminModel create
   */
  export type theAdminModelCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the theAdminModel
     */
    select?: theAdminModelSelect<ExtArgs> | null
    /**
     * The data needed to create a theAdminModel.
     */
    data: XOR<theAdminModelCreateInput, theAdminModelUncheckedCreateInput>
  }


  /**
   * theAdminModel createMany
   */
  export type theAdminModelCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many theAdminModels.
     */
    data: theAdminModelCreateManyInput | theAdminModelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * theAdminModel update
   */
  export type theAdminModelUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the theAdminModel
     */
    select?: theAdminModelSelect<ExtArgs> | null
    /**
     * The data needed to update a theAdminModel.
     */
    data: XOR<theAdminModelUpdateInput, theAdminModelUncheckedUpdateInput>
    /**
     * Choose, which theAdminModel to update.
     */
    where: theAdminModelWhereUniqueInput
  }


  /**
   * theAdminModel updateMany
   */
  export type theAdminModelUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update theAdminModels.
     */
    data: XOR<theAdminModelUpdateManyMutationInput, theAdminModelUncheckedUpdateManyInput>
    /**
     * Filter which theAdminModels to update
     */
    where?: theAdminModelWhereInput
  }


  /**
   * theAdminModel upsert
   */
  export type theAdminModelUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the theAdminModel
     */
    select?: theAdminModelSelect<ExtArgs> | null
    /**
     * The filter to search for the theAdminModel to update in case it exists.
     */
    where: theAdminModelWhereUniqueInput
    /**
     * In case the theAdminModel found by the `where` argument doesn't exist, create a new theAdminModel with this data.
     */
    create: XOR<theAdminModelCreateInput, theAdminModelUncheckedCreateInput>
    /**
     * In case the theAdminModel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<theAdminModelUpdateInput, theAdminModelUncheckedUpdateInput>
  }


  /**
   * theAdminModel delete
   */
  export type theAdminModelDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the theAdminModel
     */
    select?: theAdminModelSelect<ExtArgs> | null
    /**
     * Filter which theAdminModel to delete.
     */
    where: theAdminModelWhereUniqueInput
  }


  /**
   * theAdminModel deleteMany
   */
  export type theAdminModelDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which theAdminModels to delete
     */
    where?: theAdminModelWhereInput
  }


  /**
   * theAdminModel without action
   */
  export type theAdminModelDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the theAdminModel
     */
    select?: theAdminModelSelect<ExtArgs> | null
  }



  /**
   * Model theDispatchRiderModel
   */

  export type AggregateTheDispatchRiderModel = {
    _count: TheDispatchRiderModelCountAggregateOutputType | null
    _min: TheDispatchRiderModelMinAggregateOutputType | null
    _max: TheDispatchRiderModelMaxAggregateOutputType | null
  }

  export type TheDispatchRiderModelMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    token: string | null
    verified: boolean | null
    role: string | null
    roleID: string | null
    disID: string | null
    createdAt: Date | null
  }

  export type TheDispatchRiderModelMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    token: string | null
    verified: boolean | null
    role: string | null
    roleID: string | null
    disID: string | null
    createdAt: Date | null
  }

  export type TheDispatchRiderModelCountAggregateOutputType = {
    id: number
    email: number
    password: number
    token: number
    verified: number
    role: number
    roleID: number
    disID: number
    createdAt: number
    _all: number
  }


  export type TheDispatchRiderModelMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    token?: true
    verified?: true
    role?: true
    roleID?: true
    disID?: true
    createdAt?: true
  }

  export type TheDispatchRiderModelMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    token?: true
    verified?: true
    role?: true
    roleID?: true
    disID?: true
    createdAt?: true
  }

  export type TheDispatchRiderModelCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    token?: true
    verified?: true
    role?: true
    roleID?: true
    disID?: true
    createdAt?: true
    _all?: true
  }

  export type TheDispatchRiderModelAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which theDispatchRiderModel to aggregate.
     */
    where?: theDispatchRiderModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of theDispatchRiderModels to fetch.
     */
    orderBy?: theDispatchRiderModelOrderByWithRelationInput | theDispatchRiderModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: theDispatchRiderModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` theDispatchRiderModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` theDispatchRiderModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned theDispatchRiderModels
    **/
    _count?: true | TheDispatchRiderModelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TheDispatchRiderModelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TheDispatchRiderModelMaxAggregateInputType
  }

  export type GetTheDispatchRiderModelAggregateType<T extends TheDispatchRiderModelAggregateArgs> = {
        [P in keyof T & keyof AggregateTheDispatchRiderModel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTheDispatchRiderModel[P]>
      : GetScalarType<T[P], AggregateTheDispatchRiderModel[P]>
  }




  export type theDispatchRiderModelGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: theDispatchRiderModelWhereInput
    orderBy?: theDispatchRiderModelOrderByWithAggregationInput | theDispatchRiderModelOrderByWithAggregationInput[]
    by: TheDispatchRiderModelScalarFieldEnum[] | TheDispatchRiderModelScalarFieldEnum
    having?: theDispatchRiderModelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TheDispatchRiderModelCountAggregateInputType | true
    _min?: TheDispatchRiderModelMinAggregateInputType
    _max?: TheDispatchRiderModelMaxAggregateInputType
  }

  export type TheDispatchRiderModelGroupByOutputType = {
    id: string
    email: string
    password: string
    token: string | null
    verified: boolean
    role: string | null
    roleID: string | null
    disID: string | null
    createdAt: Date
    _count: TheDispatchRiderModelCountAggregateOutputType | null
    _min: TheDispatchRiderModelMinAggregateOutputType | null
    _max: TheDispatchRiderModelMaxAggregateOutputType | null
  }

  type GetTheDispatchRiderModelGroupByPayload<T extends theDispatchRiderModelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TheDispatchRiderModelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TheDispatchRiderModelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TheDispatchRiderModelGroupByOutputType[P]>
            : GetScalarType<T[P], TheDispatchRiderModelGroupByOutputType[P]>
        }
      >
    >


  export type theDispatchRiderModelSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    token?: boolean
    verified?: boolean
    role?: boolean
    roleID?: boolean
    disID?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["theDispatchRiderModel"]>

  export type theDispatchRiderModelSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    token?: boolean
    verified?: boolean
    role?: boolean
    roleID?: boolean
    disID?: boolean
    createdAt?: boolean
  }


  export type $theDispatchRiderModelPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "theDispatchRiderModel"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: string
      email: string
      password: string
      token: string | null
      verified: boolean
      role: string | null
      roleID: string | null
      disID: string | null
      createdAt: Date
    }, ExtArgs["result"]["theDispatchRiderModel"]>
    composites: {}
  }


  type theDispatchRiderModelGetPayload<S extends boolean | null | undefined | theDispatchRiderModelDefaultArgs> = $Result.GetResult<Prisma.$theDispatchRiderModelPayload, S>

  type theDispatchRiderModelCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<theDispatchRiderModelFindManyArgs, 'select' | 'include'> & {
      select?: TheDispatchRiderModelCountAggregateInputType | true
    }

  export interface theDispatchRiderModelDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['theDispatchRiderModel'], meta: { name: 'theDispatchRiderModel' } }
    /**
     * Find zero or one TheDispatchRiderModel that matches the filter.
     * @param {theDispatchRiderModelFindUniqueArgs} args - Arguments to find a TheDispatchRiderModel
     * @example
     * // Get one TheDispatchRiderModel
     * const theDispatchRiderModel = await prisma.theDispatchRiderModel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends theDispatchRiderModelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, theDispatchRiderModelFindUniqueArgs<ExtArgs>>
    ): Prisma__theDispatchRiderModelClient<$Result.GetResult<Prisma.$theDispatchRiderModelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TheDispatchRiderModel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {theDispatchRiderModelFindUniqueOrThrowArgs} args - Arguments to find a TheDispatchRiderModel
     * @example
     * // Get one TheDispatchRiderModel
     * const theDispatchRiderModel = await prisma.theDispatchRiderModel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends theDispatchRiderModelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, theDispatchRiderModelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__theDispatchRiderModelClient<$Result.GetResult<Prisma.$theDispatchRiderModelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TheDispatchRiderModel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {theDispatchRiderModelFindFirstArgs} args - Arguments to find a TheDispatchRiderModel
     * @example
     * // Get one TheDispatchRiderModel
     * const theDispatchRiderModel = await prisma.theDispatchRiderModel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends theDispatchRiderModelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, theDispatchRiderModelFindFirstArgs<ExtArgs>>
    ): Prisma__theDispatchRiderModelClient<$Result.GetResult<Prisma.$theDispatchRiderModelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TheDispatchRiderModel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {theDispatchRiderModelFindFirstOrThrowArgs} args - Arguments to find a TheDispatchRiderModel
     * @example
     * // Get one TheDispatchRiderModel
     * const theDispatchRiderModel = await prisma.theDispatchRiderModel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends theDispatchRiderModelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, theDispatchRiderModelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__theDispatchRiderModelClient<$Result.GetResult<Prisma.$theDispatchRiderModelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TheDispatchRiderModels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {theDispatchRiderModelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TheDispatchRiderModels
     * const theDispatchRiderModels = await prisma.theDispatchRiderModel.findMany()
     * 
     * // Get first 10 TheDispatchRiderModels
     * const theDispatchRiderModels = await prisma.theDispatchRiderModel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const theDispatchRiderModelWithIdOnly = await prisma.theDispatchRiderModel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends theDispatchRiderModelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, theDispatchRiderModelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$theDispatchRiderModelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TheDispatchRiderModel.
     * @param {theDispatchRiderModelCreateArgs} args - Arguments to create a TheDispatchRiderModel.
     * @example
     * // Create one TheDispatchRiderModel
     * const TheDispatchRiderModel = await prisma.theDispatchRiderModel.create({
     *   data: {
     *     // ... data to create a TheDispatchRiderModel
     *   }
     * })
     * 
    **/
    create<T extends theDispatchRiderModelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, theDispatchRiderModelCreateArgs<ExtArgs>>
    ): Prisma__theDispatchRiderModelClient<$Result.GetResult<Prisma.$theDispatchRiderModelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many TheDispatchRiderModels.
     *     @param {theDispatchRiderModelCreateManyArgs} args - Arguments to create many TheDispatchRiderModels.
     *     @example
     *     // Create many TheDispatchRiderModels
     *     const theDispatchRiderModel = await prisma.theDispatchRiderModel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends theDispatchRiderModelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, theDispatchRiderModelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TheDispatchRiderModel.
     * @param {theDispatchRiderModelDeleteArgs} args - Arguments to delete one TheDispatchRiderModel.
     * @example
     * // Delete one TheDispatchRiderModel
     * const TheDispatchRiderModel = await prisma.theDispatchRiderModel.delete({
     *   where: {
     *     // ... filter to delete one TheDispatchRiderModel
     *   }
     * })
     * 
    **/
    delete<T extends theDispatchRiderModelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, theDispatchRiderModelDeleteArgs<ExtArgs>>
    ): Prisma__theDispatchRiderModelClient<$Result.GetResult<Prisma.$theDispatchRiderModelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TheDispatchRiderModel.
     * @param {theDispatchRiderModelUpdateArgs} args - Arguments to update one TheDispatchRiderModel.
     * @example
     * // Update one TheDispatchRiderModel
     * const theDispatchRiderModel = await prisma.theDispatchRiderModel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends theDispatchRiderModelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, theDispatchRiderModelUpdateArgs<ExtArgs>>
    ): Prisma__theDispatchRiderModelClient<$Result.GetResult<Prisma.$theDispatchRiderModelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TheDispatchRiderModels.
     * @param {theDispatchRiderModelDeleteManyArgs} args - Arguments to filter TheDispatchRiderModels to delete.
     * @example
     * // Delete a few TheDispatchRiderModels
     * const { count } = await prisma.theDispatchRiderModel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends theDispatchRiderModelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, theDispatchRiderModelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TheDispatchRiderModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {theDispatchRiderModelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TheDispatchRiderModels
     * const theDispatchRiderModel = await prisma.theDispatchRiderModel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends theDispatchRiderModelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, theDispatchRiderModelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TheDispatchRiderModel.
     * @param {theDispatchRiderModelUpsertArgs} args - Arguments to update or create a TheDispatchRiderModel.
     * @example
     * // Update or create a TheDispatchRiderModel
     * const theDispatchRiderModel = await prisma.theDispatchRiderModel.upsert({
     *   create: {
     *     // ... data to create a TheDispatchRiderModel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TheDispatchRiderModel we want to update
     *   }
     * })
    **/
    upsert<T extends theDispatchRiderModelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, theDispatchRiderModelUpsertArgs<ExtArgs>>
    ): Prisma__theDispatchRiderModelClient<$Result.GetResult<Prisma.$theDispatchRiderModelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of TheDispatchRiderModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {theDispatchRiderModelCountArgs} args - Arguments to filter TheDispatchRiderModels to count.
     * @example
     * // Count the number of TheDispatchRiderModels
     * const count = await prisma.theDispatchRiderModel.count({
     *   where: {
     *     // ... the filter for the TheDispatchRiderModels we want to count
     *   }
     * })
    **/
    count<T extends theDispatchRiderModelCountArgs>(
      args?: Subset<T, theDispatchRiderModelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TheDispatchRiderModelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TheDispatchRiderModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheDispatchRiderModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TheDispatchRiderModelAggregateArgs>(args: Subset<T, TheDispatchRiderModelAggregateArgs>): Prisma.PrismaPromise<GetTheDispatchRiderModelAggregateType<T>>

    /**
     * Group by TheDispatchRiderModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {theDispatchRiderModelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends theDispatchRiderModelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: theDispatchRiderModelGroupByArgs['orderBy'] }
        : { orderBy?: theDispatchRiderModelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, theDispatchRiderModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTheDispatchRiderModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the theDispatchRiderModel model
   */
  readonly fields: theDispatchRiderModelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for theDispatchRiderModel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__theDispatchRiderModelClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the theDispatchRiderModel model
   */ 
  interface theDispatchRiderModelFieldRefs {
    readonly id: FieldRef<"theDispatchRiderModel", 'String'>
    readonly email: FieldRef<"theDispatchRiderModel", 'String'>
    readonly password: FieldRef<"theDispatchRiderModel", 'String'>
    readonly token: FieldRef<"theDispatchRiderModel", 'String'>
    readonly verified: FieldRef<"theDispatchRiderModel", 'Boolean'>
    readonly role: FieldRef<"theDispatchRiderModel", 'String'>
    readonly roleID: FieldRef<"theDispatchRiderModel", 'String'>
    readonly disID: FieldRef<"theDispatchRiderModel", 'String'>
    readonly createdAt: FieldRef<"theDispatchRiderModel", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * theDispatchRiderModel findUnique
   */
  export type theDispatchRiderModelFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the theDispatchRiderModel
     */
    select?: theDispatchRiderModelSelect<ExtArgs> | null
    /**
     * Filter, which theDispatchRiderModel to fetch.
     */
    where: theDispatchRiderModelWhereUniqueInput
  }


  /**
   * theDispatchRiderModel findUniqueOrThrow
   */
  export type theDispatchRiderModelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the theDispatchRiderModel
     */
    select?: theDispatchRiderModelSelect<ExtArgs> | null
    /**
     * Filter, which theDispatchRiderModel to fetch.
     */
    where: theDispatchRiderModelWhereUniqueInput
  }


  /**
   * theDispatchRiderModel findFirst
   */
  export type theDispatchRiderModelFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the theDispatchRiderModel
     */
    select?: theDispatchRiderModelSelect<ExtArgs> | null
    /**
     * Filter, which theDispatchRiderModel to fetch.
     */
    where?: theDispatchRiderModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of theDispatchRiderModels to fetch.
     */
    orderBy?: theDispatchRiderModelOrderByWithRelationInput | theDispatchRiderModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for theDispatchRiderModels.
     */
    cursor?: theDispatchRiderModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` theDispatchRiderModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` theDispatchRiderModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of theDispatchRiderModels.
     */
    distinct?: TheDispatchRiderModelScalarFieldEnum | TheDispatchRiderModelScalarFieldEnum[]
  }


  /**
   * theDispatchRiderModel findFirstOrThrow
   */
  export type theDispatchRiderModelFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the theDispatchRiderModel
     */
    select?: theDispatchRiderModelSelect<ExtArgs> | null
    /**
     * Filter, which theDispatchRiderModel to fetch.
     */
    where?: theDispatchRiderModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of theDispatchRiderModels to fetch.
     */
    orderBy?: theDispatchRiderModelOrderByWithRelationInput | theDispatchRiderModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for theDispatchRiderModels.
     */
    cursor?: theDispatchRiderModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` theDispatchRiderModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` theDispatchRiderModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of theDispatchRiderModels.
     */
    distinct?: TheDispatchRiderModelScalarFieldEnum | TheDispatchRiderModelScalarFieldEnum[]
  }


  /**
   * theDispatchRiderModel findMany
   */
  export type theDispatchRiderModelFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the theDispatchRiderModel
     */
    select?: theDispatchRiderModelSelect<ExtArgs> | null
    /**
     * Filter, which theDispatchRiderModels to fetch.
     */
    where?: theDispatchRiderModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of theDispatchRiderModels to fetch.
     */
    orderBy?: theDispatchRiderModelOrderByWithRelationInput | theDispatchRiderModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing theDispatchRiderModels.
     */
    cursor?: theDispatchRiderModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` theDispatchRiderModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` theDispatchRiderModels.
     */
    skip?: number
    distinct?: TheDispatchRiderModelScalarFieldEnum | TheDispatchRiderModelScalarFieldEnum[]
  }


  /**
   * theDispatchRiderModel create
   */
  export type theDispatchRiderModelCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the theDispatchRiderModel
     */
    select?: theDispatchRiderModelSelect<ExtArgs> | null
    /**
     * The data needed to create a theDispatchRiderModel.
     */
    data: XOR<theDispatchRiderModelCreateInput, theDispatchRiderModelUncheckedCreateInput>
  }


  /**
   * theDispatchRiderModel createMany
   */
  export type theDispatchRiderModelCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many theDispatchRiderModels.
     */
    data: theDispatchRiderModelCreateManyInput | theDispatchRiderModelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * theDispatchRiderModel update
   */
  export type theDispatchRiderModelUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the theDispatchRiderModel
     */
    select?: theDispatchRiderModelSelect<ExtArgs> | null
    /**
     * The data needed to update a theDispatchRiderModel.
     */
    data: XOR<theDispatchRiderModelUpdateInput, theDispatchRiderModelUncheckedUpdateInput>
    /**
     * Choose, which theDispatchRiderModel to update.
     */
    where: theDispatchRiderModelWhereUniqueInput
  }


  /**
   * theDispatchRiderModel updateMany
   */
  export type theDispatchRiderModelUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update theDispatchRiderModels.
     */
    data: XOR<theDispatchRiderModelUpdateManyMutationInput, theDispatchRiderModelUncheckedUpdateManyInput>
    /**
     * Filter which theDispatchRiderModels to update
     */
    where?: theDispatchRiderModelWhereInput
  }


  /**
   * theDispatchRiderModel upsert
   */
  export type theDispatchRiderModelUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the theDispatchRiderModel
     */
    select?: theDispatchRiderModelSelect<ExtArgs> | null
    /**
     * The filter to search for the theDispatchRiderModel to update in case it exists.
     */
    where: theDispatchRiderModelWhereUniqueInput
    /**
     * In case the theDispatchRiderModel found by the `where` argument doesn't exist, create a new theDispatchRiderModel with this data.
     */
    create: XOR<theDispatchRiderModelCreateInput, theDispatchRiderModelUncheckedCreateInput>
    /**
     * In case the theDispatchRiderModel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<theDispatchRiderModelUpdateInput, theDispatchRiderModelUncheckedUpdateInput>
  }


  /**
   * theDispatchRiderModel delete
   */
  export type theDispatchRiderModelDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the theDispatchRiderModel
     */
    select?: theDispatchRiderModelSelect<ExtArgs> | null
    /**
     * Filter which theDispatchRiderModel to delete.
     */
    where: theDispatchRiderModelWhereUniqueInput
  }


  /**
   * theDispatchRiderModel deleteMany
   */
  export type theDispatchRiderModelDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which theDispatchRiderModels to delete
     */
    where?: theDispatchRiderModelWhereInput
  }


  /**
   * theDispatchRiderModel without action
   */
  export type theDispatchRiderModelDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the theDispatchRiderModel
     */
    select?: theDispatchRiderModelSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const OwnerModelScalarFieldEnum: {
    id: 'id',
    owner: 'owner',
    email: 'email',
    password: 'password',
    token: 'token',
    verified: 'verified',
    avatar: 'avatar',
    avatarID: 'avatarID',
    role: 'role',
    roleID: 'roleID',
    store: 'store',
    createdAt: 'createdAt'
  };

  export type OwnerModelScalarFieldEnum = (typeof OwnerModelScalarFieldEnum)[keyof typeof OwnerModelScalarFieldEnum]


  export const StoreModelScalarFieldEnum: {
    id: 'id',
    title: 'title',
    cost: 'cost',
    description: 'description',
    category: 'category',
    color: 'color',
    image: 'image',
    imageID: 'imageID',
    ownerID: 'ownerID',
    rating: 'rating',
    createdAt: 'createdAt'
  };

  export type StoreModelScalarFieldEnum = (typeof StoreModelScalarFieldEnum)[keyof typeof StoreModelScalarFieldEnum]


  export const TheAdminModelScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    token: 'token',
    verified: 'verified',
    secretKey: 'secretKey',
    role: 'role',
    roleID: 'roleID',
    createdAt: 'createdAt'
  };

  export type TheAdminModelScalarFieldEnum = (typeof TheAdminModelScalarFieldEnum)[keyof typeof TheAdminModelScalarFieldEnum]


  export const TheDispatchRiderModelScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    token: 'token',
    verified: 'verified',
    role: 'role',
    roleID: 'roleID',
    disID: 'disID',
    createdAt: 'createdAt'
  };

  export type TheDispatchRiderModelScalarFieldEnum = (typeof TheDispatchRiderModelScalarFieldEnum)[keyof typeof TheDispatchRiderModelScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ownerModelWhereInput = {
    AND?: ownerModelWhereInput | ownerModelWhereInput[]
    OR?: ownerModelWhereInput[]
    NOT?: ownerModelWhereInput | ownerModelWhereInput[]
    id?: StringFilter<"ownerModel"> | string
    owner?: StringFilter<"ownerModel"> | string
    email?: StringFilter<"ownerModel"> | string
    password?: StringFilter<"ownerModel"> | string
    token?: StringNullableFilter<"ownerModel"> | string | null
    verified?: BoolFilter<"ownerModel"> | boolean
    avatar?: StringNullableFilter<"ownerModel"> | string | null
    avatarID?: StringNullableFilter<"ownerModel"> | string | null
    role?: StringNullableFilter<"ownerModel"> | string | null
    roleID?: StringNullableFilter<"ownerModel"> | string | null
    store?: JsonFilter<"ownerModel">
    createdAt?: DateTimeFilter<"ownerModel"> | Date | string
  }

  export type ownerModelOrderByWithRelationInput = {
    id?: SortOrder
    owner?: SortOrder
    email?: SortOrder
    password?: SortOrder
    token?: SortOrderInput | SortOrder
    verified?: SortOrder
    avatar?: SortOrderInput | SortOrder
    avatarID?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    roleID?: SortOrderInput | SortOrder
    store?: SortOrder
    createdAt?: SortOrder
  }

  export type ownerModelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    roleID?: string
    AND?: ownerModelWhereInput | ownerModelWhereInput[]
    OR?: ownerModelWhereInput[]
    NOT?: ownerModelWhereInput | ownerModelWhereInput[]
    owner?: StringFilter<"ownerModel"> | string
    password?: StringFilter<"ownerModel"> | string
    token?: StringNullableFilter<"ownerModel"> | string | null
    verified?: BoolFilter<"ownerModel"> | boolean
    avatar?: StringNullableFilter<"ownerModel"> | string | null
    avatarID?: StringNullableFilter<"ownerModel"> | string | null
    role?: StringNullableFilter<"ownerModel"> | string | null
    store?: JsonFilter<"ownerModel">
    createdAt?: DateTimeFilter<"ownerModel"> | Date | string
  }, "id" | "email" | "roleID">

  export type ownerModelOrderByWithAggregationInput = {
    id?: SortOrder
    owner?: SortOrder
    email?: SortOrder
    password?: SortOrder
    token?: SortOrderInput | SortOrder
    verified?: SortOrder
    avatar?: SortOrderInput | SortOrder
    avatarID?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    roleID?: SortOrderInput | SortOrder
    store?: SortOrder
    createdAt?: SortOrder
    _count?: ownerModelCountOrderByAggregateInput
    _max?: ownerModelMaxOrderByAggregateInput
    _min?: ownerModelMinOrderByAggregateInput
  }

  export type ownerModelScalarWhereWithAggregatesInput = {
    AND?: ownerModelScalarWhereWithAggregatesInput | ownerModelScalarWhereWithAggregatesInput[]
    OR?: ownerModelScalarWhereWithAggregatesInput[]
    NOT?: ownerModelScalarWhereWithAggregatesInput | ownerModelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ownerModel"> | string
    owner?: StringWithAggregatesFilter<"ownerModel"> | string
    email?: StringWithAggregatesFilter<"ownerModel"> | string
    password?: StringWithAggregatesFilter<"ownerModel"> | string
    token?: StringNullableWithAggregatesFilter<"ownerModel"> | string | null
    verified?: BoolWithAggregatesFilter<"ownerModel"> | boolean
    avatar?: StringNullableWithAggregatesFilter<"ownerModel"> | string | null
    avatarID?: StringNullableWithAggregatesFilter<"ownerModel"> | string | null
    role?: StringNullableWithAggregatesFilter<"ownerModel"> | string | null
    roleID?: StringNullableWithAggregatesFilter<"ownerModel"> | string | null
    store?: JsonWithAggregatesFilter<"ownerModel">
    createdAt?: DateTimeWithAggregatesFilter<"ownerModel"> | Date | string
  }

  export type storeModelWhereInput = {
    AND?: storeModelWhereInput | storeModelWhereInput[]
    OR?: storeModelWhereInput[]
    NOT?: storeModelWhereInput | storeModelWhereInput[]
    id?: StringFilter<"storeModel"> | string
    title?: StringNullableFilter<"storeModel"> | string | null
    cost?: IntFilter<"storeModel"> | number
    description?: StringNullableFilter<"storeModel"> | string | null
    category?: StringFilter<"storeModel"> | string
    color?: StringFilter<"storeModel"> | string
    image?: StringNullableFilter<"storeModel"> | string | null
    imageID?: StringNullableFilter<"storeModel"> | string | null
    ownerID?: StringFilter<"storeModel"> | string
    rating?: StringNullableFilter<"storeModel"> | string | null
    createdAt?: DateTimeFilter<"storeModel"> | Date | string
  }

  export type storeModelOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrderInput | SortOrder
    cost?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    color?: SortOrder
    image?: SortOrderInput | SortOrder
    imageID?: SortOrderInput | SortOrder
    ownerID?: SortOrder
    rating?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type storeModelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: storeModelWhereInput | storeModelWhereInput[]
    OR?: storeModelWhereInput[]
    NOT?: storeModelWhereInput | storeModelWhereInput[]
    title?: StringNullableFilter<"storeModel"> | string | null
    cost?: IntFilter<"storeModel"> | number
    description?: StringNullableFilter<"storeModel"> | string | null
    category?: StringFilter<"storeModel"> | string
    color?: StringFilter<"storeModel"> | string
    image?: StringNullableFilter<"storeModel"> | string | null
    imageID?: StringNullableFilter<"storeModel"> | string | null
    ownerID?: StringFilter<"storeModel"> | string
    rating?: StringNullableFilter<"storeModel"> | string | null
    createdAt?: DateTimeFilter<"storeModel"> | Date | string
  }, "id">

  export type storeModelOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrderInput | SortOrder
    cost?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    color?: SortOrder
    image?: SortOrderInput | SortOrder
    imageID?: SortOrderInput | SortOrder
    ownerID?: SortOrder
    rating?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: storeModelCountOrderByAggregateInput
    _avg?: storeModelAvgOrderByAggregateInput
    _max?: storeModelMaxOrderByAggregateInput
    _min?: storeModelMinOrderByAggregateInput
    _sum?: storeModelSumOrderByAggregateInput
  }

  export type storeModelScalarWhereWithAggregatesInput = {
    AND?: storeModelScalarWhereWithAggregatesInput | storeModelScalarWhereWithAggregatesInput[]
    OR?: storeModelScalarWhereWithAggregatesInput[]
    NOT?: storeModelScalarWhereWithAggregatesInput | storeModelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"storeModel"> | string
    title?: StringNullableWithAggregatesFilter<"storeModel"> | string | null
    cost?: IntWithAggregatesFilter<"storeModel"> | number
    description?: StringNullableWithAggregatesFilter<"storeModel"> | string | null
    category?: StringWithAggregatesFilter<"storeModel"> | string
    color?: StringWithAggregatesFilter<"storeModel"> | string
    image?: StringNullableWithAggregatesFilter<"storeModel"> | string | null
    imageID?: StringNullableWithAggregatesFilter<"storeModel"> | string | null
    ownerID?: StringWithAggregatesFilter<"storeModel"> | string
    rating?: StringNullableWithAggregatesFilter<"storeModel"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"storeModel"> | Date | string
  }

  export type theAdminModelWhereInput = {
    AND?: theAdminModelWhereInput | theAdminModelWhereInput[]
    OR?: theAdminModelWhereInput[]
    NOT?: theAdminModelWhereInput | theAdminModelWhereInput[]
    id?: StringFilter<"theAdminModel"> | string
    email?: StringFilter<"theAdminModel"> | string
    password?: StringFilter<"theAdminModel"> | string
    token?: StringFilter<"theAdminModel"> | string
    verified?: BoolFilter<"theAdminModel"> | boolean
    secretKey?: StringFilter<"theAdminModel"> | string
    role?: StringNullableFilter<"theAdminModel"> | string | null
    roleID?: StringNullableFilter<"theAdminModel"> | string | null
    createdAt?: DateTimeFilter<"theAdminModel"> | Date | string
  }

  export type theAdminModelOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    token?: SortOrder
    verified?: SortOrder
    secretKey?: SortOrder
    role?: SortOrderInput | SortOrder
    roleID?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type theAdminModelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    roleID?: string
    AND?: theAdminModelWhereInput | theAdminModelWhereInput[]
    OR?: theAdminModelWhereInput[]
    NOT?: theAdminModelWhereInput | theAdminModelWhereInput[]
    password?: StringFilter<"theAdminModel"> | string
    token?: StringFilter<"theAdminModel"> | string
    verified?: BoolFilter<"theAdminModel"> | boolean
    secretKey?: StringFilter<"theAdminModel"> | string
    role?: StringNullableFilter<"theAdminModel"> | string | null
    createdAt?: DateTimeFilter<"theAdminModel"> | Date | string
  }, "id" | "email" | "roleID">

  export type theAdminModelOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    token?: SortOrder
    verified?: SortOrder
    secretKey?: SortOrder
    role?: SortOrderInput | SortOrder
    roleID?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: theAdminModelCountOrderByAggregateInput
    _max?: theAdminModelMaxOrderByAggregateInput
    _min?: theAdminModelMinOrderByAggregateInput
  }

  export type theAdminModelScalarWhereWithAggregatesInput = {
    AND?: theAdminModelScalarWhereWithAggregatesInput | theAdminModelScalarWhereWithAggregatesInput[]
    OR?: theAdminModelScalarWhereWithAggregatesInput[]
    NOT?: theAdminModelScalarWhereWithAggregatesInput | theAdminModelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"theAdminModel"> | string
    email?: StringWithAggregatesFilter<"theAdminModel"> | string
    password?: StringWithAggregatesFilter<"theAdminModel"> | string
    token?: StringWithAggregatesFilter<"theAdminModel"> | string
    verified?: BoolWithAggregatesFilter<"theAdminModel"> | boolean
    secretKey?: StringWithAggregatesFilter<"theAdminModel"> | string
    role?: StringNullableWithAggregatesFilter<"theAdminModel"> | string | null
    roleID?: StringNullableWithAggregatesFilter<"theAdminModel"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"theAdminModel"> | Date | string
  }

  export type theDispatchRiderModelWhereInput = {
    AND?: theDispatchRiderModelWhereInput | theDispatchRiderModelWhereInput[]
    OR?: theDispatchRiderModelWhereInput[]
    NOT?: theDispatchRiderModelWhereInput | theDispatchRiderModelWhereInput[]
    id?: StringFilter<"theDispatchRiderModel"> | string
    email?: StringFilter<"theDispatchRiderModel"> | string
    password?: StringFilter<"theDispatchRiderModel"> | string
    token?: StringNullableFilter<"theDispatchRiderModel"> | string | null
    verified?: BoolFilter<"theDispatchRiderModel"> | boolean
    role?: StringNullableFilter<"theDispatchRiderModel"> | string | null
    roleID?: StringNullableFilter<"theDispatchRiderModel"> | string | null
    disID?: StringNullableFilter<"theDispatchRiderModel"> | string | null
    createdAt?: DateTimeFilter<"theDispatchRiderModel"> | Date | string
  }

  export type theDispatchRiderModelOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    token?: SortOrderInput | SortOrder
    verified?: SortOrder
    role?: SortOrderInput | SortOrder
    roleID?: SortOrderInput | SortOrder
    disID?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type theDispatchRiderModelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    roleID?: string
    disID?: string
    AND?: theDispatchRiderModelWhereInput | theDispatchRiderModelWhereInput[]
    OR?: theDispatchRiderModelWhereInput[]
    NOT?: theDispatchRiderModelWhereInput | theDispatchRiderModelWhereInput[]
    password?: StringFilter<"theDispatchRiderModel"> | string
    token?: StringNullableFilter<"theDispatchRiderModel"> | string | null
    verified?: BoolFilter<"theDispatchRiderModel"> | boolean
    role?: StringNullableFilter<"theDispatchRiderModel"> | string | null
    createdAt?: DateTimeFilter<"theDispatchRiderModel"> | Date | string
  }, "id" | "email" | "roleID" | "disID">

  export type theDispatchRiderModelOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    token?: SortOrderInput | SortOrder
    verified?: SortOrder
    role?: SortOrderInput | SortOrder
    roleID?: SortOrderInput | SortOrder
    disID?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: theDispatchRiderModelCountOrderByAggregateInput
    _max?: theDispatchRiderModelMaxOrderByAggregateInput
    _min?: theDispatchRiderModelMinOrderByAggregateInput
  }

  export type theDispatchRiderModelScalarWhereWithAggregatesInput = {
    AND?: theDispatchRiderModelScalarWhereWithAggregatesInput | theDispatchRiderModelScalarWhereWithAggregatesInput[]
    OR?: theDispatchRiderModelScalarWhereWithAggregatesInput[]
    NOT?: theDispatchRiderModelScalarWhereWithAggregatesInput | theDispatchRiderModelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"theDispatchRiderModel"> | string
    email?: StringWithAggregatesFilter<"theDispatchRiderModel"> | string
    password?: StringWithAggregatesFilter<"theDispatchRiderModel"> | string
    token?: StringNullableWithAggregatesFilter<"theDispatchRiderModel"> | string | null
    verified?: BoolWithAggregatesFilter<"theDispatchRiderModel"> | boolean
    role?: StringNullableWithAggregatesFilter<"theDispatchRiderModel"> | string | null
    roleID?: StringNullableWithAggregatesFilter<"theDispatchRiderModel"> | string | null
    disID?: StringNullableWithAggregatesFilter<"theDispatchRiderModel"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"theDispatchRiderModel"> | Date | string
  }

  export type ownerModelCreateInput = {
    id?: string
    owner: string
    email: string
    password: string
    token?: string | null
    verified?: boolean
    avatar?: string | null
    avatarID?: string | null
    role?: string | null
    roleID?: string | null
    store: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ownerModelUncheckedCreateInput = {
    id?: string
    owner: string
    email: string
    password: string
    token?: string | null
    verified?: boolean
    avatar?: string | null
    avatarID?: string | null
    role?: string | null
    roleID?: string | null
    store: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ownerModelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    avatarID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    store?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ownerModelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    avatarID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    store?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ownerModelCreateManyInput = {
    id?: string
    owner: string
    email: string
    password: string
    token?: string | null
    verified?: boolean
    avatar?: string | null
    avatarID?: string | null
    role?: string | null
    roleID?: string | null
    store: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ownerModelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    avatarID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    store?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ownerModelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    avatarID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    store?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type storeModelCreateInput = {
    id?: string
    title?: string | null
    cost: number
    description?: string | null
    category: string
    color: string
    image?: string | null
    imageID?: string | null
    ownerID: string
    rating?: string | null
    createdAt?: Date | string
  }

  export type storeModelUncheckedCreateInput = {
    id?: string
    title?: string | null
    cost: number
    description?: string | null
    category: string
    color: string
    image?: string | null
    imageID?: string | null
    ownerID: string
    rating?: string | null
    createdAt?: Date | string
  }

  export type storeModelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    imageID?: NullableStringFieldUpdateOperationsInput | string | null
    ownerID?: StringFieldUpdateOperationsInput | string
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type storeModelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    imageID?: NullableStringFieldUpdateOperationsInput | string | null
    ownerID?: StringFieldUpdateOperationsInput | string
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type storeModelCreateManyInput = {
    id?: string
    title?: string | null
    cost: number
    description?: string | null
    category: string
    color: string
    image?: string | null
    imageID?: string | null
    ownerID: string
    rating?: string | null
    createdAt?: Date | string
  }

  export type storeModelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    imageID?: NullableStringFieldUpdateOperationsInput | string | null
    ownerID?: StringFieldUpdateOperationsInput | string
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type storeModelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    imageID?: NullableStringFieldUpdateOperationsInput | string | null
    ownerID?: StringFieldUpdateOperationsInput | string
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type theAdminModelCreateInput = {
    id?: string
    email: string
    password: string
    token: string
    verified?: boolean
    secretKey: string
    role?: string | null
    roleID?: string | null
    createdAt?: Date | string
  }

  export type theAdminModelUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    token: string
    verified?: boolean
    secretKey: string
    role?: string | null
    roleID?: string | null
    createdAt?: Date | string
  }

  export type theAdminModelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    secretKey?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type theAdminModelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    secretKey?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type theAdminModelCreateManyInput = {
    id?: string
    email: string
    password: string
    token: string
    verified?: boolean
    secretKey: string
    role?: string | null
    roleID?: string | null
    createdAt?: Date | string
  }

  export type theAdminModelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    secretKey?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type theAdminModelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    secretKey?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type theDispatchRiderModelCreateInput = {
    id?: string
    email: string
    password: string
    token?: string | null
    verified?: boolean
    role?: string | null
    roleID?: string | null
    disID?: string | null
    createdAt?: Date | string
  }

  export type theDispatchRiderModelUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    token?: string | null
    verified?: boolean
    role?: string | null
    roleID?: string | null
    disID?: string | null
    createdAt?: Date | string
  }

  export type theDispatchRiderModelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    role?: NullableStringFieldUpdateOperationsInput | string | null
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    disID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type theDispatchRiderModelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    role?: NullableStringFieldUpdateOperationsInput | string | null
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    disID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type theDispatchRiderModelCreateManyInput = {
    id?: string
    email: string
    password: string
    token?: string | null
    verified?: boolean
    role?: string | null
    roleID?: string | null
    disID?: string | null
    createdAt?: Date | string
  }

  export type theDispatchRiderModelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    role?: NullableStringFieldUpdateOperationsInput | string | null
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    disID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type theDispatchRiderModelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    role?: NullableStringFieldUpdateOperationsInput | string | null
    roleID?: NullableStringFieldUpdateOperationsInput | string | null
    disID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ownerModelCountOrderByAggregateInput = {
    id?: SortOrder
    owner?: SortOrder
    email?: SortOrder
    password?: SortOrder
    token?: SortOrder
    verified?: SortOrder
    avatar?: SortOrder
    avatarID?: SortOrder
    role?: SortOrder
    roleID?: SortOrder
    store?: SortOrder
    createdAt?: SortOrder
  }

  export type ownerModelMaxOrderByAggregateInput = {
    id?: SortOrder
    owner?: SortOrder
    email?: SortOrder
    password?: SortOrder
    token?: SortOrder
    verified?: SortOrder
    avatar?: SortOrder
    avatarID?: SortOrder
    role?: SortOrder
    roleID?: SortOrder
    createdAt?: SortOrder
  }

  export type ownerModelMinOrderByAggregateInput = {
    id?: SortOrder
    owner?: SortOrder
    email?: SortOrder
    password?: SortOrder
    token?: SortOrder
    verified?: SortOrder
    avatar?: SortOrder
    avatarID?: SortOrder
    role?: SortOrder
    roleID?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type storeModelCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    cost?: SortOrder
    description?: SortOrder
    category?: SortOrder
    color?: SortOrder
    image?: SortOrder
    imageID?: SortOrder
    ownerID?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
  }

  export type storeModelAvgOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type storeModelMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    cost?: SortOrder
    description?: SortOrder
    category?: SortOrder
    color?: SortOrder
    image?: SortOrder
    imageID?: SortOrder
    ownerID?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
  }

  export type storeModelMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    cost?: SortOrder
    description?: SortOrder
    category?: SortOrder
    color?: SortOrder
    image?: SortOrder
    imageID?: SortOrder
    ownerID?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
  }

  export type storeModelSumOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type theAdminModelCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    token?: SortOrder
    verified?: SortOrder
    secretKey?: SortOrder
    role?: SortOrder
    roleID?: SortOrder
    createdAt?: SortOrder
  }

  export type theAdminModelMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    token?: SortOrder
    verified?: SortOrder
    secretKey?: SortOrder
    role?: SortOrder
    roleID?: SortOrder
    createdAt?: SortOrder
  }

  export type theAdminModelMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    token?: SortOrder
    verified?: SortOrder
    secretKey?: SortOrder
    role?: SortOrder
    roleID?: SortOrder
    createdAt?: SortOrder
  }

  export type theDispatchRiderModelCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    token?: SortOrder
    verified?: SortOrder
    role?: SortOrder
    roleID?: SortOrder
    disID?: SortOrder
    createdAt?: SortOrder
  }

  export type theDispatchRiderModelMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    token?: SortOrder
    verified?: SortOrder
    role?: SortOrder
    roleID?: SortOrder
    disID?: SortOrder
    createdAt?: SortOrder
  }

  export type theDispatchRiderModelMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    token?: SortOrder
    verified?: SortOrder
    role?: SortOrder
    roleID?: SortOrder
    disID?: SortOrder
    createdAt?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ownerModelDefaultArgs instead
     */
    export type ownerModelArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ownerModelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use storeModelDefaultArgs instead
     */
    export type storeModelArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = storeModelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use theAdminModelDefaultArgs instead
     */
    export type theAdminModelArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = theAdminModelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use theDispatchRiderModelDefaultArgs instead
     */
    export type theDispatchRiderModelArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = theDispatchRiderModelDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}